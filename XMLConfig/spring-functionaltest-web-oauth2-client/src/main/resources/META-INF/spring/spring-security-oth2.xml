<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:sec="http://www.springframework.org/schema/security"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:util="http://www.springframework.org/schema/util"
  xsi:schemaLocation="http://www.springframework.org/schema/security https://www.springframework.org/schema/security/spring-security.xsd
        http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

  <sec:http pattern="/auth/**" request-matcher="ant">
    <sec:form-login />
    <sec:logout />
    <sec:oauth2-client />
    <sec:intercept-url pattern="/**" access="permitAll"/>
  </sec:http>

  <sec:client-registrations>
    <!-- READ Only -->
    <sec:client-registration
      registration-id="registration_read" client-id="readClient"
      client-secret="secret" authorization-grant-type="authorization_code"
      redirect-uri="{baseUrl}/auth/authorized" scope="READ"
      provider-id="provider_1" />
    <!-- UPDATE not allowed -->
    <sec:client-registration
      registration-id="registration_wrong" client-id="readClient"
      client-secret="secret" authorization-grant-type="authorization_code"
      redirect-uri="{baseUrl}/auth/authorized" scope="READ,UPDATE"
      provider-id="provider_1" />
    <!-- ALL OK -->
    <sec:client-registration
      registration-id="registration_all" client-id="testClient"
      client-secret="secret" authorization-grant-type="authorization_code"
      redirect-uri="{baseUrl}/auth/authorized"
      scope="READ,UPDATE,CREATE,DELETE" provider-id="provider_1" />
    <!-- READ or DELETE -->
    <sec:client-registration
      registration-id="registration_partial" client-id="testClient"
      client-secret="secret" authorization-grant-type="authorization_code"
      redirect-uri="{baseUrl}/auth/authorized" scope="READ,DELETE"
      provider-id="provider_1" />
    <!-- AccessToken endpoint is wrong -->
    <sec:client-registration
      registration-id="registration_token_wrong" client-id="readClient"
      client-secret="secret" authorization-grant-type="authorization_code"
      redirect-uri="{baseUrl}/auth/authorized" scope="READ"
      provider-id="token_wrong" />
    <!-- Authorization endpoint is wrong -->
    <sec:client-registration
      registration-id="registration_auth_wrong" client-id="readClient"
      client-secret="secret" authorization-grant-type="authorization_code"
      redirect-uri="{baseUrl}/auth/authorized" scope="READ"
      provider-id="auth_wrong" />
    <!-- Send Wait -->
    <sec:client-registration
      registration-id="registration_wait" client-id="testClient"
      client-secret="secret" authorization-grant-type="authorization_code"
      redirect-uri="{baseUrl}/auth/authorized"
      scope="READ,UPDATE,CREATE,DELETE" provider-id="provider_1" />
    <!-- Set the url directly as placeholders do not work. -->
    <sec:provider provider-id="provider_1"
      authorization-uri="http://localhost:8900/realms/spring-functionaltest/protocol/openid-connect/auth"
      token-uri="http://localhost:8900/realms/spring-functionaltest/protocol/openid-connect/token" />
    <sec:provider provider-id="auth_wrong"
      authorization-uri="http://localhost:8900/realms/spring-functionaltest/protocol/openid-connect/wrong"
      token-uri="http://localhost:8900/realms/spring-functionaltest/protocol/openid-connect/token" />
    <sec:provider provider-id="token_wrong"
      authorization-uri="http://localhost:8900/realms/spring-functionaltest/protocol/openid-connect/auth"
      token-uri="http://localhost:8900/realms/spring-functionaltest/protocol/openid-connect/wrong" />
  </sec:client-registrations>

  <!-- RestTemplate -->

  <util:map id="oauthRestTemplateMap" key-type="java.lang.String" value-type="org.springframework.web.client.RestTemplate">
    <entry key="registration_read" value-ref="readOnlyRestTemplate" />
    <entry key="registration_wrong" value-ref="wrongSettingRestTemplate" />
    <entry key="registration_all" value-ref="allPermittedRestTemplate" />
    <entry key="registration_partial" value-ref="partiallyPermittedRestTemplate" />
    <entry key="registration_token_wrong" value-ref="wrongTokenRestTemplate" />
    <entry key="registration_auth_wrong" value-ref="wrongAuthRestTemplate" />
    <entry key="registration_wait" value-ref="waitRestTemplate" />
  </util:map>
  
  <bean id="restTmplateErrorHandler" class="jp.co.ntt.fw.spring.functionaltest.app.handler.RestTemplateResponseErrorHandler" />

  <bean id="noAuthRestTemplate" class="org.springframework.web.client.RestTemplate">
    <property name="requestFactory">
      <bean class="org.springframework.http.client.SimpleClientHttpRequestFactory">
        <property name="connectTimeout" value="${oth2.resource.connection.timeout:10000}" />
        <property name="readTimeout" value="${oth2.resource.read.timeout:10000}" />
      </bean>
    </property>
    <property name="errorHandler" ref="restTmplateErrorHandler" />
  </bean>

  <bean id="readOnlyRestTemplate" class="org.springframework.web.client.RestTemplate">
    <property name="requestFactory">
      <bean class="org.springframework.http.client.SimpleClientHttpRequestFactory">
        <property name="connectTimeout" value="${oth2.resource.connection.timeout:10000}" />
        <property name="readTimeout" value="${oth2.resource.read.timeout:10000}" />
      </bean>
    </property>
    <!-- アクセストークンはインタセプタで差し込む -->
    <property name="interceptors">
      <bean class="jp.co.ntt.fw.spring.functionaltest.domain.service.interceptor.RestTemplateAccessTokenInterceptor">
        <property name="registrationId" value="registration_read" />
      </bean>
    </property>
    <property name="errorHandler" ref="restTmplateErrorHandler" />
  </bean>

  <bean id="wrongSettingRestTemplate" class="org.springframework.web.client.RestTemplate">
    <property name="requestFactory">
      <bean class="org.springframework.http.client.SimpleClientHttpRequestFactory">
        <property name="connectTimeout" value="${oth2.resource.connection.timeout:10000}" />
        <property name="readTimeout" value="${oth2.resource.read.timeout:10000}" />
      </bean>
    </property>
    <property name="interceptors">
      <bean class="jp.co.ntt.fw.spring.functionaltest.domain.service.interceptor.RestTemplateAccessTokenInterceptor">
        <property name="registrationId" value="registration_wrong" />
      </bean>
    </property>
    <property name="errorHandler" ref="restTmplateErrorHandler" />
  </bean>

  <bean id="allPermittedRestTemplate"
    class="org.springframework.web.client.RestTemplate">
    <property name="requestFactory">
      <bean class="org.springframework.http.client.SimpleClientHttpRequestFactory">
        <property name="connectTimeout" value="${oth2.resource.connection.timeout:10000}" />
        <property name="readTimeout" value="${oth2.resource.read.timeout:10000}" />
      </bean>
    </property>
    <property name="interceptors">
      <bean class="jp.co.ntt.fw.spring.functionaltest.domain.service.interceptor.RestTemplateAccessTokenInterceptor">
        <property name="registrationId" value="registration_all" />
      </bean>
    </property>
    <property name="errorHandler" ref="restTmplateErrorHandler" />
  </bean>

  <bean id="partiallyPermittedRestTemplate" class="org.springframework.web.client.RestTemplate">
    <property name="requestFactory">
      <bean class="org.springframework.http.client.SimpleClientHttpRequestFactory">
        <property name="connectTimeout" value="${oth2.resource.connection.timeout:10000}" />
        <property name="readTimeout" value="${oth2.resource.read.timeout:10000}" />
      </bean>
    </property>
    <property name="interceptors">
      <bean class="jp.co.ntt.fw.spring.functionaltest.domain.service.interceptor.RestTemplateAccessTokenInterceptor">
        <property name="registrationId" value="registration_partial" />
      </bean>
    </property>
    <property name="errorHandler" ref="restTmplateErrorHandler" />
  </bean>
  
  <bean id="wrongTokenRestTemplate" class="org.springframework.web.client.RestTemplate">
    <property name="requestFactory">
      <bean class="org.springframework.http.client.SimpleClientHttpRequestFactory">
        <property name="connectTimeout" value="${oth2.resource.connection.timeout:10000}" />
        <property name="readTimeout" value="${oth2.resource.read.timeout:10000}" />
      </bean>
    </property>
    <property name="interceptors">
      <bean class="jp.co.ntt.fw.spring.functionaltest.domain.service.interceptor.RestTemplateAccessTokenInterceptor">
        <property name="registrationId" value="registration_token_wrong" />
      </bean>
    </property>
    <property name="errorHandler" ref="restTmplateErrorHandler" />
  </bean>

  <bean id="wrongAuthRestTemplate" class="org.springframework.web.client.RestTemplate">
    <property name="requestFactory">
      <bean class="org.springframework.http.client.SimpleClientHttpRequestFactory">
        <property name="connectTimeout" value="${oth2.resource.connection.timeout:10000}" />
        <property name="readTimeout" value="${oth2.resource.read.timeout:10000}" />
      </bean>
    </property>
    <property name="interceptors">
      <bean class="jp.co.ntt.fw.spring.functionaltest.domain.service.interceptor.RestTemplateAccessTokenInterceptor">
        <property name="registrationId" value="registration_auth_wrong" />
      </bean>
    </property>
    <property name="errorHandler" ref="restTmplateErrorHandler" />
  </bean>

  <bean id="waitRestTemplate" class="org.springframework.web.client.RestTemplate">
    <property name="requestFactory">
      <bean class="org.springframework.http.client.SimpleClientHttpRequestFactory">
        <property name="connectTimeout" value="${oth2.resource.connection.timeout:10000}" />
        <property name="readTimeout" value="${oth2.resource.read.timeout:10000}" />
      </bean>
    </property>
    <property name="interceptors">
      <bean class="jp.co.ntt.fw.spring.functionaltest.domain.service.interceptor.RestTemplateSendWaitInterceptor">
        <property name="registrationId" value="registration_wait" />
      </bean>
    </property>
    <property name="errorHandler" ref="restTmplateErrorHandler" />
  </bean>

</beans>